/*
 * Venus
 * Copyright 2013 LinkedIn
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing,
 *     software distributed under the License is distributed on an "AS
 *     IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *     express or implied.   See the License for the specific language
 *     governing permissions and limitations under the License.
 **/

// Parse code coverage data
'use strict';

var fs   = require('fs'),
    path = require('path');

function CodeCoverage() {}

/**
 * Parse raw code coverage data and generate friendly metrics
 * @param {Object} data - raw code coverage generated by instrumentation tool (istanbul)
 */
CodeCoverage.prototype.parse = function (data) {
  var results = {};

  Object.keys(data).forEach(function (filePath) {
    results[filePath] = this.parseFileData(filePath, data[filePath]);
  }, this);

  return results;
};

/**
 * Parse file metrics
 */
CodeCoverage.prototype.parseFileData = function (filePath, data) {
  var result = {
    path: filePath,
    statements: this.parseStatements(data),
    functions: this.parseFunctions(data),
    branches: this.parseBranches(data)
  };

  return result;
};

/**
 * Parse metrics on token coverage
 */
CodeCoverage.prototype.parseTokenCoverage = function (data) {
  var total = 0,
      covered = 0,
      tokens = {};

  Object.keys(data).forEach(function (token) {
    countTokenData(data[token]);
  });

  function countTokenData(tokenValue) {
    if (typeof tokenValue === 'number') {
      total = total + 1;

      if (tokenValue > 0) {
        covered = covered + 1;
      }
    } else if (Array.isArray(tokenValue)) {
      tokenValue.forEach(function (tokenValue) {
        countTokenData(tokenValue);
      });
    }
  }


  return {
    percent: covered / total
  };

};

/**
 * Parse metrics on statement coverage
 */
CodeCoverage.prototype.parseStatements = function (data) {
  return this.parseTokenCoverage(data.s);
};

/**
 * Parse metrics on function coverage
 */
CodeCoverage.prototype.parseFunctions = function (data) {
  return this.parseTokenCoverage(data.f);
};

/**
 * Parse metrics on branch coverage
 */
CodeCoverage.prototype.parseBranches = function (data) {
  return this.parseTokenCoverage(data.b);
};

/**
 * Write code coverage summary file
 */
CodeCoverage.prototype.writeSummary = function (data, outputPath) {
  var fileOutput =
    ['source file, total lines, code coverage, lines covered, lines not covered'];

  outputPath = outputPath || 'coverage.csv';

  data.forEach(function (obj) {
    var fileData = obj[Object.keys(obj)[0]],
        path = fileData.path,
        statements = fileData.statementMap,
        coveredLines = [],
        line,
        fileContents,
        totalLinesInFile,
        coveragePercentage,
        uncoveredLines = [];

    Object.keys(statements).forEach(function (key) {
      var statement = statements[key],
          startLine = statement.start.line,
          endLine   = statement.end.line;

      for (line = startLine; line <= endLine; line++) {
        if (coveredLines.indexOf(line) === -1) {
          coveredLines.push(line);
        }
      }

    });

    fileContents = fs.readFileSync(path).toString();
    totalLinesInFile = fileContents.split('\n').length - 1;

    for (line = 1; line <= totalLinesInFile; line++) {
      if (coveredLines.indexOf(line) === -1) {
        uncoveredLines.push(line);
      }
    }

    coveragePercentage = (coveredLines.length / totalLinesInFile).toPrecision(2);

    fileOutput.push([
      path,
      totalLinesInFile,
      coveragePercentage,
      coveredLines.join(' '),
      uncoveredLines.join(' ')
    ].join(','));
  });

  fs.writeFileSync(outputPath, fileOutput.join('\n'));
};

module.exports = new CodeCoverage();
